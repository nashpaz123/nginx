# Main Nginx configuration file

user www-data;  # Define the user that the Nginx worker processes will run as.
worker_processes auto;  # Set the number of worker processes. Using 'auto' allows Nginx to determine the optimal number based on available CPU cores.

error_log /var/log/nginx/error.log warn;  # Define the location of the error log file and the log level.
pid /run/nginx.pid;  # Define the file that will store the PID of the main Nginx process.

events {
    worker_connections 1024;  # Set the maximum number of simultaneous connections that can be opened by a worker process.
    use epoll;  # Use the 'epoll' method for handling connections (Linux-specific and more efficient).
    multi_accept on;  # Allow a worker to accept all new connections at once.
}

http {
    include /etc/nginx/mime.types;  # Include additional configuration files for MIME types.
    default_type application/octet-stream;  # Set the default MIME type for files if one is not specified.

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '  # Define log format.
                      '$status $body_bytes_sent "$http_referer" '  # Custom format 'main' for access logs.
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;  # Define the location of the access log file and the log format.
    sendfile on;  # Enable sendfile() system call for improved file transfer performance.
    tcp_nopush on;  # Optimize the way Nginx sends data to the client.
    tcp_nodelay on;  # Disable Nagle's algorithm for better TCP performance.
    keepalive_timeout 65;  # Configure keep-alive connections.
    types_hash_max_size 2048;  # Set the maximum size of the types hash table.
    client_max_body_size 10M;  # Set the maximum size of the client request body.

    # Gzip configuration for compression.
    gzip on;  # Enable gzip compression.
    gzip_disable "msie6";  # Disable gzip for old versions of Internet Explorer.
    gzip_vary on;  # Enable the "Vary: Accept-Encoding" header.
    gzip_proxied any;  # Enable gzip for all proxied requests.
    gzip_comp_level 6;  # Set the compression level (1-9).
    gzip_buffers 16 8k;  # Set the number and size of buffers used for compression.
    gzip_http_version 1.1;  # Set the minimum HTTP version required for gzip compression.
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;  # Define the MIME types that will be compressed.

    # SSL/TLS configuration
    ssl_protocols TLSv1.2 TLSv1.3;  # Specify the SSL/TLS protocols to use.
    ssl_prefer_server_ciphers on;  # Prefer server ciphers over client ciphers.
    ssl_ciphers HIGH:!aNULL:!MD5;  # Define the ciphers to use for SSL/TLS.
    ssl_session_cache shared:SSL:10m;  # Enable shared session cache.
    ssl_session_timeout 10m;  # Set the session timeout.

    # Server block for the main site
    server {
        listen 80 default_server;  # Listen on port 80 for IPv4 connections.
        listen [::]:80 default_server;  # Listen on port 80 for IPv6 connections.

        server_name your_domain_or_IP;  # Define the server name (domain).

        root /var/www/html;  # Define the root directory for the server.
        index index.html index.htm index.php;  # Define the default file to serve.

        location / {
            try_files $uri $uri/ =404;  # Try to serve the requested file, if it doesn't exist, return a 404 error.
        }

        location ~ \.php$ {
            include snippets/fastcgi-php.conf;  # Include the fastcgi parameters.
            fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Define the FastCGI server to pass PHP requests to.
        }

        location ~ /\.ht {
            deny all;  # Block access to .htaccess files.
        }

        add_header X-Content-Type-Options nosniff;  # Additional security headers.
        add_header X-Frame-Options "SAMEORIGIN";  # Prevent clickjacking.
        add_header X-XSS-Protection "1; mode=block";  # Enable XSS protection.

        access_log /var/log/nginx/your_site_access.log;  # Log file locations for the access log.
        error_log /var/log/nginx/your_site_error.log warn;  # Log file locations for the error log.

        # SSL/TLS configuration (uncomment and configure if you have SSL certificates).
        # listen 443 ssl;  # Listen on port 443 for SSL connections.
        # ssl_certificate /etc/ssl/certs/your_domain.pem;  # Define the path to the SSL certificate.
        # ssl_certificate_key /etc/ssl/private/your_domain.key;  # Define the path to the SSL certificate key.
        # ssl_protocols TLSv1.2 TLSv1.3;  # Specify the SSL/TLS protocols to use.
        # ssl_ciphers HIGH:!aNULL:!MD5;  # Define the ciphers to use for SSL/TLS.
        # ssl_prefer_server_ciphers on;  # Prefer server ciphers over client ciphers.
    }

    # Server block for another site
    server {
        listen 8080;  # Listen on port 8080 for this server.
        server_name another_domain_or_IP;  # Define the server name (domain).

        root /var/www/another_site;  # Define the root directory for the server.
        index index.html index.htm;  # Define the default file to serve.

        location / {
            try_files $uri $uri/ =404;  # Try to serve the requested file, if it doesn't exist, return a 404 error.
        }

        access_log /var/log/nginx/another_site_access.log;  # Log file locations for the access log.
        error_log /var/log/nginx/another_site_error.log warn;  # Log file locations for the error log.
    }

    # Server block for a load-balanced backend
    upstream backend {
        server backend1.example.com;  # Define the first backend server.
        server backend2.example.com;  # Define the second backend server.
        # Additional backend servers can be added here.
    }

    server {
        listen 8081;  # Listen on port 8081 for this server.
        server_name load_balancer_domain_or_IP;  # Define the server name (domain).

        location / {
            proxy_pass http://backend;  # Pass requests to the defined upstream backend.
            proxy_set_header Host $host;  # Preserve the original Host header.
            proxy_set_header X-Real-IP $remote_addr;  # Forward the real client's IP address.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the original client's IP address.
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original protocol (http or https).
        }

        access_log /var/log/nginx/load_balancer_access.log;  # Log file locations for the access log.
        error_log /var/log/nginx/load_balancer_error.log warn;  # Log file locations for the error log.
    }

    # Location block for caching static content
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 30d;  # Set the expiration time for static content.
        access_log off;  # Disable access logging for static content.
    }

    # Location block for rate limiting
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;  # Define a rate limit zone.
    server {
        listen 8082;  # Listen on port 8082 for this server.
        server_name rate_limited_domain_or_IP;  # Define the server name (domain).

        location / {
            limit_req zone=one burst=5 nodelay;  # Apply rate limiting with a burst of 5 requests.
            proxy_pass http://backend;  # Pass requests to the defined upstream backend.
        }

        access_log /var/log/nginx/rate_limited_access.log;  # Log file locations for the access log.
        error_log /var/log/nginx/rate_limited_error.log warn;  # Log file locations for the error log.
    }
}
